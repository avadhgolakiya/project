document.addEventListener("DOMContentLoaded", function(){   // This ensures all your JavaScript runs only after the full HTML content is loaded in the browser. 
    const chatbotContainer = document.getElementById("chatbot-container");
    const closeBtn = document.getElementById("close-btn");
    const sendBtn = document.getElementById("send-btn");
    const chatBotInput = document.getElementById("chatbot-input");
    const chatBotMessages = document.getElementById("chatbot-messages");
    const chatBotIcon = document.getElementById("chatbot-icon");

    chatBotIcon.addEventListener("click", () => {
        chatbotContainer.classList.remove("hidden");  //It removes the hidden class (shows the chatbot)
        chatBotIcon.style.display = "none"; //Hides the chatbot icon display none
    });

    closeBtn.addEventListener("click", () => {
        chatbotContainer.classList.add("hidden");  //Adds the hidden class hides chatbot box.
        chatBotIcon.style.display = "flex";  //Shows the ðŸ’¬ icon again.
    });

    sendBtn.addEventListener("click", sendMessage);

    chatBotInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") sendMessage();  //If user presses Enter key, it calls sendMessage() just like the button.
    });

    function sendMessage(){
        const userMessage = chatBotInput.value.trim();
        if(userMessage){
            appendMessage("user", userMessage);
            chatBotInput.value = "";
            getBotResponse(userMessage); //Calls getBotResponse() to talk to Gemini API.
        }
    }

    function appendMessage(sender, message){
        const messageContainer = document.getElementById("chatbot-messages");
        const messageElement = document.createElement("div");  //Creates a new div element to store value
        messageElement.classList.add("message", sender); //Adds class message and either user or bot.
        messageElement.textContent = message;
        messageContainer.appendChild(messageElement);
        messageContainer.scrollTop = messageContainer.scrollHeight;  //Scrolls to the bottom automatically.
    }

    async function getBotResponse(userMessage){
        const API_KEY = "AIzaSyAFDU1IgbMI_MbaimHeYadjnGXL_oIV6-g";
        const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;

        try {
            const response = await fetch(API_URL, {  //Waits for the response to come back before moving to the next line 
                method: "POST",  //"POST" means we are sending data to the API (like submitting a form).
                headers: { "Content-Type": "application/json" },  //This tells the API that we're sending JSON data.
                body: JSON.stringify({  //This converts our JavaScript object into a JSON string because the server expects JSON format.
                    contents: [  //We're sending an object that has a property called contents, which is an array.
                        {
                            parts: [{ text: userMessage }],  //parts is an array that contains objects,Each object has a text field,userMessage is the text the user typed.
                        },
                    ],
                }),
            });

            const data = await response.json();  //response.json() reads the API's response and converts it into a JavaScript object (from JSON format), await waits for that conversion to complete before moving on,The result is stored in a variable called data.

            if (!data.candidates || !data.candidates.length) {  // Checks if candidates does not exist (is undefined or null),  Checks if candidates exists but is empty (like []).
                throw new Error("No response from Gemini API");
            }

            const botMessage = data.candidates[0].content.parts[0].text; //data â†’ the full response object from the API
            //content â†’ holds the actual generated response,
            //data.candidates[0] â†’ the first response choice from the API (Gemini can give multiple suggestions).
            //content â†’ holds the actual generated response
            //parts[0] â†’ the first part of that content (some models support splitting replies).
            //text â†’ the actual text message generated by the bot.
            appendMessage("bot", botMessage); //"bot" tells the function who sent the message (for styling)
        } catch (error) { //If any error happens (e.g., internet issue or API fails), shows an error message in chat.
            console.error("Error:", error);
            appendMessage("bot", "Sorry, I'm having trouble responding. Please try again.");
        }
    }
});
